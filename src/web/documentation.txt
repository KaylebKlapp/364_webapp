Documentation Statement: To better formulate the documentation statements for the assignment
we have conslidate each statement down to a part of the file. Overall, authorized resources
were strictly followed. Here is the documentation statement for each file: 

index.html: Only used an example from our team members' previous Web Development 
projects. Nav bar information found on w3 schools and from Logan's previous Web Development 
PEX/project. For the Space-A description, we used the official description posted 
on https://myarmybenefits.us.army.mil/Benefit-Library/Federal-Benefits/Space-Available-Travel-(Space-A-Travel). 

connecting to servers on each page: I used the following websites to help me understand how to connect to the 
PostgreSQL using a php file by using the pg_connect function: 
https://www.w3resource.com/PostgreSQL/PostgreSQL-with-php-a-through-introduction.php
https://www.a2hosting.com/kb/developer-corner/postgresql/connect-to-postgresql-using-php/
To ensure error handling, I used the following website to understand the die command: 
https://www.w3schools.com/php/php_error.asp

login.php: Because I wanted to use pgAdmin4 as my database management system, 
I had to make authentication php code for PostgreSQL. Therefore I used the technique in this YouTube video to authenticate: 
https://www.youtube.com/watch?v=Ll_nJ03FT6Q. This consisted of making a function in the 
space-a database and then using that function in the php code. We further developed this code
ourselvs to incorperate an admin check/authentication as well.

user_home.php: only resources used here is the instructor provided handout for authentication.
We used the ideas from that document to help understand $_SESSION variables along with 
how session_start(); works. We used the following w3 schools website to help with the onclick event 
on a button: https://www.w3schools.com/jsref/event_onclick.asp. 

user_reserved.php: for the user_reserved.php file we used the previously mentioned youtube video
mentioned under the login.php documentation to help with starting the session, connecting to the 
database, and error handling. Additionally, we used pgAdmin4 to help create and check our 
SQL query to help query which flights that the current user has reserved. Additionally, we used
our pervious SQL PEX/assignment to help understand the more complicated queries, such as having
multiple instances of a entity being used at one time. We also referenced this website to help
with these queries as well: https://www.geeksforgeeks.org/how-to-perform-sql-join-on-multiple-columns-in-same-table/?ref=ml_lbp. 

flight_query.php: 

flights.php: https://stackoverflow.com/questions/12462899/php-button-on-each-row-of-table

confirmation.php

admin.php

airport_add.php

airport_delete.php

flight_add.php

flight_delete.php

flight_query.php

logout.php

manage_admins.php

register.php:

remove_users.php:

database creation: Space-a database back up (.sql file): I used the following website to help me understand
how to create a .sql file to help back up the entire database for testing purposes: 
https://www.netguru.com/blog/how-to-dump-and-restore-postgresql-database. Timestamp: I used the following to help understand the timestamp data type: 
https://www.commandprompt.com/education/postgresql-timestamp-timestamp-without-time-zone-data-type/



Other than that, no other resources were used to complete this assignment. 
Unless we missed something, which is totally possible, but we didnt use chatGPT.
